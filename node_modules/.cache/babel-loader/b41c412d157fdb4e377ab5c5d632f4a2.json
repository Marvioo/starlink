{"ast":null,"code":"import _classCallCheck from\"/Users/Marvin/Developer/LaiOffer/Projects/starlink/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/Marvin/Developer/LaiOffer/Projects/starlink/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/Marvin/Developer/LaiOffer/Projects/starlink/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/Marvin/Developer/LaiOffer/Projects/starlink/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import{feature}from'topojson-client';import axios from'axios';import{geoKavrayskiy7}from'd3-geo-projection';import{geoGraticule,geoPath}from'd3-geo';import{select as d3Select}from'd3-selection';import{Spin}from\"antd\";import{schemeCategory10}from\"d3-scale-chromatic\";import*as d3Scale from\"d3-scale\";import{timeFormat as d3TimeFormat}from\"d3-time-format\";import{BASE_URL,WORLD_MAP_URL,SATELLITE_POSITION_URL,SAT_API_KEY}from\"../constants\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var width=960;var height=600;var WorldMap=/*#__PURE__*/function(_Component){_inherits(WorldMap,_Component);var _super=_createSuper(WorldMap);function WorldMap(){var _this;_classCallCheck(this,WorldMap);_this=_super.call(this);_this.track=function(data){if(!data[0].hasOwnProperty(\"positions\")){throw new Error(\"no position data\");return;}var len=data[0].positions.length;var duration=_this.props.observerData.duration;// we need to draw the time on this map\nvar context2=_this.map.context2;var now=new Date();var i=0;// display time info on the overlay canvas\nvar timer=setInterval(function(){// current time \nvar ct=new Date();// calculate the elapsed time\nvar timePassed=i===0?0:ct-now;// calculate the actual time\nvar time=new Date(now.getTime()+60*timePassed);// clear the previous drawing\ncontext2.clearRect(0,0,width,height);context2.font=\"bold 14px sans-serif\";context2.fillStyle=\"#333\";context2.textAlign=\"center\";context2.fillText(d3TimeFormat(time),width/2,10);if(i>=len){clearInterval(timer);_this.setState({isDrawing:false});var oHint=document.getElementsByClassName(\"hint\")[0];oHint.innerHTML=\"\";return;}data.forEach(function(sat){var info=sat.info,positions=sat.positions;_this.drawSat(info,positions[i]);});i+=60;},1000);};_this.drawSat=function(sat,pos){var satlongitude=pos.satlongitude,satlatitude=pos.satlatitude;if(!satlongitude||!satlatitude)return;var satname=sat.satname;var nameWithNumber=satname.match(/\\d+/g).join(\"\");var _this$map=_this.map,projection=_this$map.projection,context2=_this$map.context2;var xy=projection([satlongitude,satlatitude]);context2.fillStyle=_this.color(nameWithNumber);context2.beginPath();context2.arc(xy[0],xy[1],4,0,2*Math.PI);context2.fill();context2.font=\"bold 11px sans-serif\";context2.textAlign=\"center\";context2.fillText(nameWithNumber,xy[0],xy[1]+14);};_this.state={isDrawing:false,isLoading:false};_this.map=null;// color range\n_this.color=d3Scale.scaleOrdinal(schemeCategory10);_this.refMap=/*#__PURE__*/React.createRef();_this.refTrack=/*#__PURE__*/React.createRef();return _this;}_createClass(WorldMap,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;axios.get(WORLD_MAP_URL).then(function(res){var data=res.data;var land=feature(data,data.objects.countries).features;_this2.generateMap(land);}).catch(function(e){return console.log('err in fecth world map data ',e);});}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState,snapshot){var _this3=this;if(prevProps.satData!==this.props.satData){// Step 1: get observer data from props.observerData\nif(prevProps.satData!==this.props.satData){var _this$props$observerD=this.props.observerData,latitude=_this$props$observerD.latitude,longitude=_this$props$observerD.longitude,elevation=_this$props$observerD.elevation,altitude=_this$props$observerD.altitude,duration=_this$props$observerD.duration;var endTime=duration*60;this.setState({isLoading:true});// Step 2: for each sat, we get id from props.satData\n// Step 3: for each sat, get its position\nvar urls=this.props.satData.map(function(sat){var satid=sat.satid;var url=\"\".concat(BASE_URL,\"/api/\").concat(SATELLITE_POSITION_URL,\"/\").concat(satid,\"/\").concat(latitude,\"/\").concat(longitude,\"/\").concat(elevation,\"/\").concat(endTime,\"/&apiKey=\").concat(SAT_API_KEY);return axios.get(url);});Promise.all(urls).then(function(res){var arr=res.map(function(sat){return sat.data;});// we are drawing this path so isDrawing is true\n_this3.setState({isLoading:false,isDrawing:true});if(!prevState.isDrawing){_this3.track(arr);}else{var oHint=document.getElementsByClassName(\"hint\")[0];oHint.innerHTML=\"Please wait for these satellite animation to finish before selection new ones!\";}}).catch(function(e){console.log(\"err in fetch satellite position -> \",e.message);});}// step 4: display each position on the map\n}}},{key:\"generateMap\",value:function generateMap(land){// Step1: get world map shape\nvar projection=geoKavrayskiy7().scale(170).translate([width/2,height/2]).precision(.1);var graticule=geoGraticule();// Step2: get canvas\nvar canvas=d3Select(this.refMap.current).attr(\"width\",width).attr(\"height\",height);var canvas2=d3Select(this.refTrack.current).attr(\"width\",width).attr(\"height\",height);var context=canvas.node().getContext(\"2d\");var context2=canvas2.node().getContext(\"2d\");var path=geoPath().projection(projection).context(context);// Step3: project world map data on the map\nland.forEach(function(ele){context.fillStyle='#B3DDEF';context.strokeStyle='#000';context.globalAlpha=0.7;context.beginPath();path(ele);context.fill();context.stroke();context.strokeStyle='rgba(220, 220, 220, 0.1)';context.beginPath();path(graticule());context.lineWidth=0.1;context.stroke();context.beginPath();context.lineWidth=0.5;path(graticule.outline());context.stroke();});this.map={projection:projection,graticule:graticule,context:context,context2:context2};}},{key:\"render\",value:function render(){var isLoading=this.state.isLoading;return/*#__PURE__*/_jsxs(\"div\",{className:\"map-box\",children:[isLoading?/*#__PURE__*/_jsx(\"div\",{className:\"spinner\",children:/*#__PURE__*/_jsx(Spin,{tip:\"Loading...\",size:\"large\"})}):null,/*#__PURE__*/_jsx(\"canvas\",{className:\"map\",ref:this.refMap}),/*#__PURE__*/_jsx(\"canvas\",{className:\"track\",ref:this.refTrack}),/*#__PURE__*/_jsx(\"div\",{className:\"hint\"})]});}}]);return WorldMap;}(Component);export default WorldMap;","map":{"version":3,"names":["React","Component","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","Spin","schemeCategory10","d3Scale","timeFormat","d3TimeFormat","BASE_URL","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","track","data","hasOwnProperty","Error","len","positions","length","duration","props","observerData","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","setState","isDrawing","oHint","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","state","isLoading","scaleOrdinal","refMap","createRef","refTrack","get","then","res","land","objects","countries","features","generateMap","catch","e","console","log","prevProps","prevState","snapshot","satData","latitude","longitude","elevation","altitude","endTime","urls","satid","url","Promise","all","arr","message","scale","translate","precision","graticule","canvas","current","attr","canvas2","context","node","getContext","path","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline"],"sources":["/Users/Marvin/Developer/LaiOffer/Projects/starlink/src/components/WorldMap.js"],"sourcesContent":["import React, {Component} from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { Spin } from \"antd\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  BASE_URL,\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constants\";\n\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor(){\n        super();\n        this.state = {\n            isDrawing: false,\n            isLoading: false\n        }\n        this.map = null;\n        // color range\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    \n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fecth world map data ', e))\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData !== this.props.satData) {\n            // Step 1: get observer data from props.observerData\n            if (prevProps.satData !== this.props.satData) {\n                const {\n                  latitude,\n                  longitude,\n                  elevation,\n                  altitude,\n                  duration\n                } = this.props.observerData;\n                const endTime = duration * 60;\n                \n                this.setState({\n                    isLoading: true\n                  });\n\n                // Step 2: for each sat, we get id from props.satData\n                // Step 3: for each sat, get its position\n                const urls = this.props.satData.map(sat => {\n                    const { satid } = sat;\n                    const url = `${BASE_URL}/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n            \n                    return axios.get(url);\n                });\n\n                Promise.all(urls)\n                .then(res => {\n                    const arr = res.map(sat => sat.data);\n                    // we are drawing this path so isDrawing is true\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n\n                    if (!prevState.isDrawing) {\n                        this.track(arr);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML =\n                        \"Please wait for these satellite animation to finish before selection new ones!\";\n                    }\n                })\n                .catch(e => {\n                    console.log(\"err in fetch satellite position -> \", e.message);\n                });\n            }\n            \n            \n            \n            // step 4: display each position on the map\n        }\n    }\n\n    track = data => {\n        if (!data[0].hasOwnProperty(\"positions\")) {\n            throw new Error(\"no position data\");\n            return;\n          }\n          const len = data[0].positions.length;\n          const { duration } = this.props.observerData;\n          // we need to draw the time on this map\n          const { context2 } = this.map;\n\n          let now = new Date();\n      \n          let i = 0;\n          // display time info on the overlay canvas\n\n          let timer = setInterval(() => {\n            // current time \n            let ct = new Date();\n            \n            // calculate the elapsed time\n            let timePassed = i === 0 ? 0 : ct - now;\n\n            // calculate the actual time\n            let time = new Date(now.getTime() + 60 * timePassed);\n            \n            // clear the previous drawing\n            context2.clearRect(0, 0, width, height);\n      \n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n      \n            if (i >= len) {\n              clearInterval(timer);\n              this.setState({ isDrawing: false });\n              const oHint = document.getElementsByClassName(\"hint\")[0];\n              oHint.innerHTML = \"\";\n              return;\n            }\n      \n            data.forEach(sat => {\n              const { info, positions } = sat;\n              this.drawSat(info, positions[i]);\n            });\n      \n            i += 60;\n          }, 1000);\n    }\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n    \n        if (!satlongitude || !satlatitude) return;\n    \n        const { satname } = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n    \n        const { projection, context2 } = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n    \n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n    \n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n      };\n    \n\n    generateMap(land){\n        // Step1: get world map shape\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        const graticule = geoGraticule();\n\n        // Step2: get canvas\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        // Step3: project world map data on the map\n        land.forEach(ele => {\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        });\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        };\n      \n    }\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                {isLoading ? (\n                    <div className=\"spinner\">\n                    <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n                <div className=\"hint\" />\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}