{"ast":null,"code":"var _jsxFileName = \"/Users/Marvin/Developer/LaiOffer/Projects/starlink/src/components/WorldMap.js\";\nimport React, { Component } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { Spin } from \"antd\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\nimport { BASE_URL, WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      map: null,\n      isLoading: false\n    };\n    this.refMap = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fecth world map data ', e));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      // Step 1: get observer data from props.observerData\n      if (prevProps.satData !== this.props.satData) {\n        const {\n          latitude,\n          longitude,\n          elevation,\n          altitude,\n          duration\n        } = this.props.observerData;\n        const endTime = duration * 60; // Step 2: for each sat, we get id from props.satData\n        // Step 3: for each sat, get its position\n\n        const urls = this.props.satData.map(sat => {\n          const {\n            satid\n          } = sat;\n          const url = `${BASE_URL}/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n          return axios.get(url);\n        });\n        Promise.all(urls).then(res => {\n          const arr = res.map(sat => sat.data);\n          this.setState({\n            isLoading: false,\n            isDrawing: true\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML = \"Please wait for these satellite animation to finish before selection new ones!\";\n          }\n        }).catch(e => {\n          console.log(\"err in fetch satellite position -> \", e.message);\n        });\n      } // step 4: display each position on the map\n\n    }\n  }\n\n  generateMap(land) {\n    // Step1: get world map shape\n    const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n    const graticule = geoGraticule(); // Step2: get canvas\n\n    const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n    let context = canvas.node().getContext(\"2d\");\n    let path = geoPath().projection(projection).context(context); // Step3: project world map data on the map\n\n    land.forEach(ele => {\n      context.fillStyle = '#B3DDEF';\n      context.strokeStyle = '#000';\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n      context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\",\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          tip: \"Loading...\",\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"names":["React","Component","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","Spin","schemeCategory10","d3Scale","timeFormat","d3TimeFormat","BASE_URL","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","constructor","state","map","isLoading","refMap","createRef","componentDidMount","get","then","res","data","land","objects","countries","features","generateMap","catch","e","console","log","componentDidUpdate","prevProps","prevState","snapshot","satData","props","latitude","longitude","elevation","altitude","duration","observerData","endTime","urls","sat","satid","url","Promise","all","arr","setState","isDrawing","track","oHint","document","getElementsByClassName","innerHTML","message","projection","scale","translate","precision","graticule","canvas","current","attr","context","node","getContext","path","forEach","ele","fillStyle","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","render"],"sources":["/Users/Marvin/Developer/LaiOffer/Projects/starlink/src/components/WorldMap.js"],"sourcesContent":["import React, {Component} from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { Spin } from \"antd\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  BASE_URL,\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constants\";\n\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor(){\n        super();\n        this.state = {\n            map: null,\n            isLoading: false\n        }\n        this.refMap = React.createRef();\n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fecth world map data ', e))\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData !== this.props.satData) {\n            // Step 1: get observer data from props.observerData\n            if (prevProps.satData !== this.props.satData) {\n                const {\n                  latitude,\n                  longitude,\n                  elevation,\n                  altitude,\n                  duration\n                } = this.props.observerData;\n                const endTime = duration * 60;\n                \n                // Step 2: for each sat, we get id from props.satData\n                // Step 3: for each sat, get its position\n                const urls = this.props.satData.map(sat => {\n                    const { satid } = sat;\n                    const url = `${BASE_URL}/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n            \n                    return axios.get(url);\n                });\n\n                Promise.all(urls)\n                .then(res => {\n                    const arr = res.map(sat => sat.data);\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n\n                    if (!prevState.isDrawing) {\n                        this.track(arr);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML =\n                        \"Please wait for these satellite animation to finish before selection new ones!\";\n                    }\n                })\n                .catch(e => {\n                    console.log(\"err in fetch satellite position -> \", e.message);\n                });\n            }\n            \n            \n            \n            // step 4: display each position on the map\n        }\n    }\n\n    generateMap(land){\n        // Step1: get world map shape\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        const graticule = geoGraticule();\n\n        // Step2: get canvas\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        let context = canvas.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        // Step3: project world map data on the map\n        land.forEach(ele => {\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n    }\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                {isLoading ? (\n                    <div className=\"spinner\">\n                    <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap} />\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}