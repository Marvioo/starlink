{"ast":null,"code":"var _jsxFileName = \"/Users/Marvin/Developer/LaiOffer/Projects/starlink/src/components/WorldMap.js\";\nimport React, { Component } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { Spin } from \"antd\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\nimport { BASE_URL, WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.track = data => {\n      if (!data[0].hasOwnProperty(\"positions\")) {\n        throw new Error(\"no position data\");\n        return;\n      }\n\n      const len = data[0].positions.length;\n      const {\n        duration\n      } = this.props.observerData; // we need to draw the time on this map\n\n      const {\n        context2\n      } = this.map;\n      let now = new Date();\n      let i = 0; // display time info on the overlay canvas\n\n      let timer = setInterval(() => {\n        // current time \n        let ct = new Date(); // calculate the elapsed time\n\n        let timePassed = i === 0 ? 0 : ct - now; // calculate the actual time\n\n        let time = new Date(now.getTime() + 60 * timePassed); // clear the previous drawing\n\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\";\n        context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n        if (i >= len) {\n          clearInterval(timer);\n          this.setState({\n            isDrawing: false\n          });\n          const oHint = document.getElementsByClassName(\"hint\")[0];\n          oHint.innerHTML = \"\";\n          return;\n        }\n\n        data.forEach(sat => {\n          const {\n            info,\n            positions\n          } = sat;\n          this.drawSat(info, positions[i]);\n        });\n        i += 60;\n      }, 1000);\n    };\n\n    this.drawSat = (sat, pos) => {\n      const {\n        satlongitude,\n        satlatitude\n      } = pos;\n      if (!satlongitude || !satlatitude) return;\n      const {\n        satname\n      } = sat;\n      const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n      const {\n        projection,\n        context2\n      } = this.map;\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = this.color(nameWithNumber);\n      context2.beginPath();\n      context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n      context2.fill();\n      context2.font = \"bold 11px sans-serif\";\n      context2.textAlign = \"center\";\n      context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    this.state = {\n      isDrawing: false,\n      isLoading: false\n    };\n    this.map = null; // color range\n\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = /*#__PURE__*/React.createRef();\n    this.refTrack = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fecth world map data ', e));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      // Step 1: get observer data from props.observerData\n      if (prevProps.satData !== this.props.satData) {\n        const {\n          latitude,\n          longitude,\n          elevation,\n          altitude,\n          duration\n        } = this.props.observerData;\n        const endTime = duration * 60;\n        this.setState({\n          isLoading: true\n        }); // Step 2: for each sat, we get id from props.satData\n        // Step 3: for each sat, get its position\n\n        const urls = this.props.satData.map(sat => {\n          const {\n            satid\n          } = sat;\n          const url = `${BASE_URL}/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n          return axios.get(url);\n        });\n        Promise.all(urls).then(res => {\n          const arr = res.map(sat => sat.data); // we are drawing this path so isDrawing is true\n\n          this.setState({\n            isLoading: false,\n            isDrawing: true\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML = \"Please wait for these satellite animation to finish before selection new ones!\";\n          }\n        }).catch(e => {\n          console.log(\"err in fetch satellite position -> \", e.message);\n        });\n      } // step 4: display each position on the map\n\n    }\n  }\n\n  generateMap(land) {\n    // Step1: get world map shape\n    const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n    const graticule = geoGraticule(); // Step2: get canvas\n\n    const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n    const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\");\n    let path = geoPath().projection(projection).context(context); // Step3: project world map data on the map\n\n    land.forEach(ele => {\n      context.fillStyle = '#B3DDEF';\n      context.strokeStyle = '#000';\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n      context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2\n    };\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\",\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          tip: \"Loading...\",\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"track\",\n        ref: this.refTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"names":["React","Component","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","Spin","schemeCategory10","d3Scale","timeFormat","d3TimeFormat","BASE_URL","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","constructor","track","data","hasOwnProperty","Error","len","positions","length","duration","props","observerData","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","setState","isDrawing","oHint","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","state","isLoading","scaleOrdinal","refMap","createRef","refTrack","componentDidMount","get","then","res","land","objects","countries","features","generateMap","catch","e","console","log","componentDidUpdate","prevProps","prevState","snapshot","satData","latitude","longitude","elevation","altitude","endTime","urls","satid","url","Promise","all","arr","message","scale","translate","precision","graticule","canvas","current","attr","canvas2","context","node","getContext","path","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","render"],"sources":["/Users/Marvin/Developer/LaiOffer/Projects/starlink/src/components/WorldMap.js"],"sourcesContent":["import React, {Component} from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { Spin } from \"antd\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  BASE_URL,\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constants\";\n\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor(){\n        super();\n        this.state = {\n            isDrawing: false,\n            isLoading: false\n        }\n        this.map = null;\n        // color range\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    \n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fecth world map data ', e))\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData !== this.props.satData) {\n            // Step 1: get observer data from props.observerData\n            if (prevProps.satData !== this.props.satData) {\n                const {\n                  latitude,\n                  longitude,\n                  elevation,\n                  altitude,\n                  duration\n                } = this.props.observerData;\n                const endTime = duration * 60;\n                \n                this.setState({\n                    isLoading: true\n                  });\n\n                // Step 2: for each sat, we get id from props.satData\n                // Step 3: for each sat, get its position\n                const urls = this.props.satData.map(sat => {\n                    const { satid } = sat;\n                    const url = `${BASE_URL}/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n            \n                    return axios.get(url);\n                });\n\n                Promise.all(urls)\n                .then(res => {\n                    const arr = res.map(sat => sat.data);\n                    // we are drawing this path so isDrawing is true\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n\n                    if (!prevState.isDrawing) {\n                        this.track(arr);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML =\n                        \"Please wait for these satellite animation to finish before selection new ones!\";\n                    }\n                })\n                .catch(e => {\n                    console.log(\"err in fetch satellite position -> \", e.message);\n                });\n            }\n            \n            \n            \n            // step 4: display each position on the map\n        }\n    }\n\n    track = data => {\n        if (!data[0].hasOwnProperty(\"positions\")) {\n            throw new Error(\"no position data\");\n            return;\n          }\n          const len = data[0].positions.length;\n          const { duration } = this.props.observerData;\n          // we need to draw the time on this map\n          const { context2 } = this.map;\n\n          let now = new Date();\n      \n          let i = 0;\n          // display time info on the overlay canvas\n\n          let timer = setInterval(() => {\n            // current time \n            let ct = new Date();\n            \n            // calculate the elapsed time\n            let timePassed = i === 0 ? 0 : ct - now;\n\n            // calculate the actual time\n            let time = new Date(now.getTime() + 60 * timePassed);\n            \n            // clear the previous drawing\n            context2.clearRect(0, 0, width, height);\n      \n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n      \n            if (i >= len) {\n              clearInterval(timer);\n              this.setState({ isDrawing: false });\n              const oHint = document.getElementsByClassName(\"hint\")[0];\n              oHint.innerHTML = \"\";\n              return;\n            }\n      \n            data.forEach(sat => {\n              const { info, positions } = sat;\n              this.drawSat(info, positions[i]);\n            });\n      \n            i += 60;\n          }, 1000);\n    }\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n    \n        if (!satlongitude || !satlatitude) return;\n    \n        const { satname } = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n    \n        const { projection, context2 } = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n    \n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n    \n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n      };\n    \n\n    generateMap(land){\n        // Step1: get world map shape\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        const graticule = geoGraticule();\n\n        // Step2: get canvas\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        // Step3: project world map data on the map\n        land.forEach(ele => {\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        });\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        };\n      \n    }\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                {isLoading ? (\n                    <div className=\"spinner\">\n                    <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}